##############################################################################################################################
# Freeze log

[video server]Checking camera availability...
[video_server.check_camera] thread lock here
[qt overlay] Found kiosk_app on tkinter_root
[qt overlay] Stored kiosk_app with computer_name: TIME-MACHINE-KIOSK


...

[message handler] Creating new file downloader for admin IP: 192.168.0.110
[message handler] Initiating sync with admin at 192.168.0.110
[kiosk_file_downloader] Sync requested
[kiosk_file_downloader] Operations appear to be stalled, resetting state...
[kiosk_file_downloader] Reset sync state

...

[kiosk_file_downloader] Processing batch of 10 files (19.3MB)
[kiosk_file_downloader] Processed 50/73 files...
[kiosk_file_downloader] Processing batch of 10 files (44.7MB)
[kiosk_file_downloader] Processed 60/73 files...
[kiosk_file_downloader] Processing batch of 10 files


##############################################################################################################################
# important/immediate todo

"failed to download files"?

film video solutions, import/move over audio hints, add image hints as custom hints and images to the manual hint library

rebooter added to kiosk app

video player performance abysmal
  identify and ensure all "video finish" logic exists in video MANAGER, then proceed with player rewrite

##############################################################################################################################
# known priority bugs

hangup reliability: 
    kiosks don't always launch successfully, especially after the video feed check
    kiosk doesn't retry/add itself back to queue after failed sync attempt
    "Blocking Network Operations (Highest Probability): This is by far the most likely culprit. The code has multiple places where network operations (sockets, HTTP requests) occur without proper timeouts and error handling. SIGINT (Ctrl+C) often interrupts these blocking calls.
    Deadlocks (Medium Probability): The code uses threading.Lock in several places (audio_server.py, video_server.py, kiosk_file_downloader.py, video_manager.py, prop_data_monitor.py). Improper lock acquisition and release can lead to deadlocks. A single Ctrl+C might interrupt one thread, potentially breaking a deadlock, but this is unreliable.
    Long-running operations in the main Tkinter thread (Medium Probability): Blocking calls in the Tkinter main thread will freeze the GUI and can lead to this behavior. While the code tries to offload to threads, some operations still might occur within after callbacks or event handlers.
    Pygame Mixer Issues (Low Probability): While less likely than network issues, improper use of pygame.mixer can sometimes cause hangs, especially if there are errors loading or playing audio files.
    Infinite Loops (Low Probability): Less likely, but still possible. If any of the while self.running: loops have a subtle bug that prevents them from exiting, this could occur."

##############################################################################################################################
# known low priority bugs

kiosk auto resets twice
tab out doesn't always clear UI elements from view
kiosk UI element clearing behaviors in relation to videos are flickery due to numerous checks "arguing" about whether they should persist
password for settings gets prompted twice
mqtt connections get crippled while running file sync

##############################################################################################################################
# planned features: 

xyz finished their game (instead of generic victory sound)

kiosk relaunch after sync finish

periodic setting of casino/morning after according to room?

reset props, reset room (runs reset all + reset kiosk)

##############################################################################################################################
# ambitious extra ideas:

"wave back" button
more specific standby audio
log video solution usage to discourage excessive use
make "reset kiosk" a reliable UI debugger somehow
soundcheck logic kiosk side
save props' status for blackbox, delete save upon load
"enable drink menu" by default on
dark theme
hint count on THEIR side
"your host/gamemaster's name" shown at victory/loss(?) screen
route sound to speaker placed in office instead of from headphones
LLM translator call
AI generated text hint based on room state
announce to lobby: room states for automatic standbys/room victory/out of time 
mqtt LEDs for GMs to point out items (checkbox on hints, available or not based on "has_light" flag in prop naming json)
kiosk responds to prop finishes with vfx
technician app (e.g "finish all" button), reset ALLLLLL props, kiosk restarter, soundcheck functionality
dark theme
destroy all tkinter kiosk side

profile creation,
profile deletion (admin only)
save hint to public (usable by all profiles, shown what profile made it, save to own private profile)
save hint to private (local to profile)
save hint to global/default (admin only)
set hint color

##############################################################################################################################

prop monitoring functionality prompt:

For now, on the admin side, it need only print every message it receives from the kiosk, but it will only receive such messages when it has asked the kiosk for them.

So, it sends a message to kiosk message handler, and that tells message_handler to tell prop_data_monitor to gather a copy of all the data and send via networking.

it will be up to the admin's network_broadcast_handler to receive and parse this data, again, but that's later and for now it will just print.

The admin will have a file which will contain all of the IPs that the kiosk will need to report its latest data on, so this info will be included in the message sent via message_handler.

Please examine the structure of prop_name_mapping.json. Each item will have added to it (if necessary; some items will not have an "ip" property) "ip". So when admin requests data on props, it will pull all the IPs from that room's props based on prop_name_mapping.json.